package main

import (
	"fmt"
	"strconv"
)

func uniqueInts(slice []int) []int {
	// 创建一个 map 来存储唯一元素
	seen := make(map[int]struct{})
	var unique []int

	for _, num := range slice {
		// 使用 map 来检查元素是否已经存在
		if _, exists := seen[num]; !exists {
			// 如果元素是唯一的，则添加到 unique 切片中
			unique = append(unique, num)
			// 在 map 中标记这个元素已经存在
			seen[num] = struct{}{}
		}
	}

	return unique
}

func main() {
	numbes := []int{478819, 481713, 491341, 491341, 491341, 491341, 448164, 450766, 450766, 450766, 450766, 450766, 450766, 450766, 450766, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 453318, 458337, 458337, 458337, 458337, 458337, 458337, 458337, 458337, 458337, 458337, 458337, 458337, 458337, 458337, 458337, 458337, 458337, 458337, 458337, 458337, 458337, 458337, 458337, 458337, 458337, 458337, 458337, 458337, 469747, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 472832, 473820, 473820, 473820, 473820, 473820, 473820, 473820, 473820, 473820, 473820, 473820, 473820, 473820, 473820, 473959, 473959, 473959, 473959, 473959, 473959, 473959, 473959, 473959, 473959, 473959, 473959, 473959, 473959, 478008, 478008, 478008, 478008, 489080, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491341, 491353, 491362, 491367, 491372, 453318, 453318, 453318, 453318, 489080, 489080, 491715, 478008, 492129, 492129, 492463, 421813, 421813, 421813, 421813, 421813, 421813, 484258, 484258, 484258, 484258, 484258, 484258, 484258, 484258, 484258, 484258, 484258, 484258, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 482490, 488603, 488604, 488605, 489039, 489039, 489039, 490493, 490493, 490493, 490493, 490493, 490493, 490493, 490493, 490493, 490493, 490493, 490493, 490493, 490493, 491715, 491715, 491715, 491715, 491715, 491715, 491715, 491715, 491715, 491715, 491715, 491715, 492308, 492308, 492308, 492308, 492308, 492308, 492308, 492308, 492308, 492308, 492308, 492308, 492308, 492308, 492308, 492308, 492308, 492308, 492702, 492735, 492735, 492735, 492735, 492735, 492735, 492735, 492735, 492735, 492735, 492735, 492735, 492702, 492788, 492788, 492788, 492788, 492788, 492788, 492788, 492788, 492788, 492788, 492788, 492788, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 492810, 493067, 493067, 493067, 493074, 493074, 493074, 493074, 493074, 493074, 493074, 493074, 493074, 493074, 493074, 493074, 493089, 493089, 493089, 493284, 484258, 484258, 484258, 484258, 484258, 484258, 484258, 484258, 484258, 484258, 484258, 484258, 488604, 488604, 488604, 488604, 488604, 488603, 488603, 488603, 488603, 488605, 488605, 488605, 488605, 489039, 436252, 466640, 474796, 436252, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 480696, 436252, 485972, 489298, 490131, 490131, 490131, 490131, 490131, 490131, 491425, 491973, 491973, 491973, 491973, 491973, 491973, 488599, 488599, 488599, 488599, 488599, 488599, 488599, 488599, 488599, 488599, 488599, 488599, 494039, 490131, 490131, 490131, 490131, 490131, 490131, 494058, 494058, 494058, 494066, 494066, 494066, 494202, 494202, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494224, 494568, 494568, 494607, 494611, 495240, 495240, 495240, 495240, 495325, 495626, 495626, 495626, 495626, 379077, 379077, 396362, 396362, 396362, 397336, 397336, 397336, 397336, 397423, 397428, 397428, 397428, 397428, 396362, 397423, 397423, 404120, 404120, 404120, 404120, 404120, 404120, 412887, 418036, 418036, 418036, 418036, 418036, 418036, 418036, 418036, 423323, 423323, 426230, 426230, 427216, 431501, 431501, 431770, 431770, 450000, 450008, 423323, 465088, 465088, 465088, 465088, 465088, 465088, 465088, 465088, 465088, 465088, 465088, 465088, 465088, 465088, 465340, 465395, 465395, 470425, 470425, 470425, 470425, 470425, 470425, 470425, 470425, 470425, 470425, 471631, 471631, 473617, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475797, 475807, 475810, 478034, 478034, 478034, 478034, 479090, 479090, 479090, 479090, 479090, 479090, 479090, 479090, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 479208, 473617, 492113, 492113, 492137, 492137, 465088, 465088, 465088, 465088, 465088, 465088, 465088, 465088, 465088, 465088, 465088, 465088, 465088, 465088, 465088, 465088, 465088, 465088, 492573, 492573, 492573, 492573, 470425, 470425, 470425, 470425, 470425, 492679, 492679, 492679, 492679, 492679, 492679, 492679, 492679, 492694, 465395, 465395, 465395, 465395, 465395, 493610, 495148, 495469, 495469, 495469, 495469, 496215, 496782, 496782, 496782, 496782, 496842, 496842, 496842, 496842, 496842, 496842, 496842, 496842, 496842, 496842, 496842, 496842, 496848, 496848, 496848, 496848, 496848, 496848, 496848, 496848, 496848, 496848, 496848, 496848, 497170, 497170, 497170, 497170, 497170, 497170, 497170, 497170, 497240, 497240, 497240, 493610, 493610, 493610, 493610, 493610, 431501, 497883, 49788}

	// 去重后的数字列表
	uniqueNumbers := uniqueInts(numbes)

	// 输出去重后的数字列表
	fmt.Println(len(uniqueNumbers))
	fmt.Println(uniqueNumbers)

	nuwws := []string{}
	for _, value := range numbes {
		nuwws = append(nuwws, strconv.Itoa(value)+",")
	}
	fmt.Println(nuwws)
}
